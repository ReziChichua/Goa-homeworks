#ინიციალიზაცია ნიშნავს ობიექტის შექმნისას მისი საწყისი მდგომარეობის დაყენებას. Python-ში ამისთვის ვიყენებთ __init__ მეთოდს.

#კლასის ცვლადები ეკუთვნის თავად კლასს და ყველა ობიექტს ერთობლივად აქვთ წვდომა მასზე.

#Instance methods (ობიექტის მეთოდები)
#ესენი არის ფუნქციები, რომლებიც ეკუთვნის კონკრეტულ ობიექტს და პირველად არგუმენტად ყოველთვის self აქვთ.

#Inheritance (მემკვიდრეობა)
#მემკვიდრეობა საშუალებას გვაძლევს ერთმა კლასმა მემკვიდრეობით მიიღოს მეორეს თვისებები და მეთოდები.

#Multiple inheritance (მრავალმხრივი მემკვიდრეობა)
#კლასი შეიძლება ერთდროულად რამდენიმე კლასისგან მემკვიდრეობით მიიღოს თვისებები.

#Multilevel inheritance (მრავლისგან მრავალზე მემკვიდრეობა)
#ერთმა კლასმა მემკვიდრეობით მიიღოს მეორე კლასისგან, რომელიც თავის მხრივ სხვა კლასისგან მემკვიდრეობით იღებს.

#super() საშუალებას გვაძლევს მშობელი კლასის მეთოდებს მივმართოთ.

#Abstract classes (აბსტრაქტული კლასები)
#აბსტრაქტული კლასები არის კლასები, რომლებსაც არ შეგვიძლია ობიექტებად ვაქციოთ და რომლებსაც მინიმუმ ერთი აბსტრაქტული მეთოდი უნდა ჰქონდეთ. Python-ში abc მოდულს ვიყენებთ.

#Polymorphism (პოლიმორფიზმი)
#პოლიმორფიზმი ნიშნავს ერთსა და იმავე ინტერფეისზე სხვადასხვა ქცევას.

#Duck typing (დათქ ტაიპინგი)
#Python-ში მნიშვნელობა აქვს მხოლოდ ობიექტის ქცევას, არა მის ტიპს. "თუ ასე გამოიყურება და ასე იქცევა, ესე იგი ეს არის."

#Aggregation (აგრეგაცია)
#აგრეგაცია არის "უნეისრული" კავშირი ობიექტებს შორის, ანუ ერთი ობიექტი შეიცავს მეორეს, მაგრამ ორივეს დამოუკიდებლად არსებობა შეუძლია.

#Composition (კომპოზიცია)
#კომპოზიცია ნიშნავს, რომ ერთი ობიექტი ქმნის და ფლობს მეორე ობიექტს და მისი ცხოვრება მასზეა დამოკიდებული.

#Static methods (სტატიკური მეთოდები)
#სტატიკური მეთოდები არ იღებენ self-ს და დამოუკიდებლები არიან ობიექტისა და კლასისგან.

#Class methods (კლასის მეთოდები)
#კლასის მეთოდები იღებენ cls-ს, რომელიც წარმოადგენს თვითონ კლასს.

#Data hiding (მონაცემების დამალვა)
#Python-ში მონაცემების დამალვა შესაძლებელია ცვლადის სახელის წინ ორმაგი ქვედა ხაზით (__).